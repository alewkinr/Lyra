version: '3.2'
networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    postgres_data: {}

services:
  traefik:
    image: traefik:v2.3
    restart: always
    container_name: traefik
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    networks:
      - monitor-net

  ui:
    image: docker.pkg.github.com/alewkinr/lyra/ui
    build:
      context: ./front
      dockerfile: Dockerfile
    restart: always
    container_name: ui
    networks:
      - monitor-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.services.ui.loadbalancer.server.port=80"
      - "traefik.http.routers.ui.entrypoints=web"

  postgres:
    image: postgres:10.5
    restart: always
    container_name: postgres
    volumes:
      - "./infra/postgres:/var/lib/postgresql/data"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  auth:
    image: docker.pkg.github.com/alewkinr/lyra/auth:latest
    build:
      context: ./back/auth
      dockerfile: Dockerfile
    volumes:
      - "./back/auth/:/service"
    container_name: auth
    restart: always
    env_file:
      - ./back/auth/.env
    networks:
      - monitor-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"

  # сервис моделей
  model:
    image: docker.pkg.github.com/alewkinr/lyra/model:latest
    build:
      context: ./back/model
      dockerfile: Dockerfile
    volumes:
      - ./back/model/:/service
    container_name: model
    restart: always
    env_file:
      - ./back/model/.env
    networks:
      - monitor-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.model.rule=Host(`${HOSTNAME}`) && PathPrefix(`/model`)"
      - "traefik.http.services.model.loadbalancer.server.port=8080"
      - "traefik.http.routers.model.entrypoints=web"

  # prometheus для метрик
  prometheus:
    image: prom/prometheus:v2.17.0
    container_name: prometheus
    restart: always
    expose:
      - 9090
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    volumes:
      - "./infra/metrics/prometheus/:/etc/prometheus/"
      - "prometheus_data:/prometheus"
    networks:
      - monitor-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${HOSTNAME}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=8080"
      - "traefik.http.routers.prometheus.entrypoints=web"

  # prometheus push-gateway для метрик
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: always
    expose:
      - 9091
    ports:
      - "9091:9091"
    networks:
      - monitor-net

  ml-runner:
    image: docker.pkg.github.com/alewkinr/lyra/extra_trees_classifier:v4_test
    build:
      context: ./infra/runner
      dockerfile: Dockerfile
    container_name: ml-runner
    restart: always
    environment:
      - LYRA_METRICS_HOST=pushgateway:9091
    networks:
      - monitor-net
